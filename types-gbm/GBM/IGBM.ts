/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IGBMInterface extends utils.Interface {
  functions: {
    "bid(uint256,uint256,uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "getAuctionBidDecimals(uint256)": FunctionFragment;
    "getAuctionBidMultiplier(uint256)": FunctionFragment;
    "getAuctionDebt(uint256)": FunctionFragment;
    "getAuctionDueIncentives(uint256)": FunctionFragment;
    "getAuctionEndTime(uint256)": FunctionFragment;
    "getAuctionHighestBid(uint256)": FunctionFragment;
    "getAuctionHighestBidder(uint256)": FunctionFragment;
    "getAuctionID(address,bytes4,uint256,uint256)": FunctionFragment;
    "getAuctionIncMax(uint256)": FunctionFragment;
    "getAuctionIncMin(uint256)": FunctionFragment;
    "getAuctionStartTime(uint256)": FunctionFragment;
    "getAuctionStepMin(uint256)": FunctionFragment;
    "getContractAddress(uint256)": FunctionFragment;
    "getHammerTimeDuration(uint256)": FunctionFragment;
    "getTokenAmount(uint256)": FunctionFragment;
    "getTokenId(uint256)": FunctionFragment;
    "getTokenKind(uint256)": FunctionFragment;
    "massRegistrerERC1155Each(address,address,uint256,uint256,uint256)": FunctionFragment;
    "massRegistrerERC721Each(address,address,uint256,uint256)": FunctionFragment;
    "modifyAnAuctionToken(uint256,uint256,address)": FunctionFragment;
    "modifyAnAuctionToken(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerAnAuctionContract(address,address)": FunctionFragment;
    "registerAnAuctionToken(address,uint256,bytes4,uint256,address)": FunctionFragment;
    "setBiddingAllowed(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bid"
      | "claim"
      | "getAuctionBidDecimals"
      | "getAuctionBidMultiplier"
      | "getAuctionDebt"
      | "getAuctionDueIncentives"
      | "getAuctionEndTime"
      | "getAuctionHighestBid"
      | "getAuctionHighestBidder"
      | "getAuctionID"
      | "getAuctionIncMax"
      | "getAuctionIncMin"
      | "getAuctionStartTime"
      | "getAuctionStepMin"
      | "getContractAddress"
      | "getHammerTimeDuration"
      | "getTokenAmount"
      | "getTokenId"
      | "getTokenKind"
      | "massRegistrerERC1155Each"
      | "massRegistrerERC721Each"
      | "modifyAnAuctionToken(uint256,uint256,address)"
      | "modifyAnAuctionToken(uint256,address)"
      | "owner"
      | "registerAnAuctionContract"
      | "registerAnAuctionToken"
      | "setBiddingAllowed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bid",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBidDecimals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBidMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDebt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDueIncentives",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionEndTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionHighestBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionHighestBidder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionID",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionIncMax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionIncMin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStartTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStepMin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHammerTimeDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenKind",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "massRegistrerERC1155Each",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "massRegistrerERC721Each",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyAnAuctionToken(uint256,uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyAnAuctionToken(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAnAuctionContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAnAuctionToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBiddingAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBidDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBidMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDueIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionIncMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionIncMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStepMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHammerTimeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenKind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massRegistrerERC1155Each",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massRegistrerERC721Each",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyAnAuctionToken(uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyAnAuctionToken(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAnAuctionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAnAuctionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBiddingAllowed",
    data: BytesLike
  ): Result;

  events: {
    "Auction_BidPlaced(uint256,address,uint256)": EventFragment;
    "Auction_BidRemoved(uint256,address,uint256)": EventFragment;
    "Auction_Claimed(uint256)": EventFragment;
    "Auction_EndTimeUpdated(uint256,uint256)": EventFragment;
    "Auction_IncentivePaid(uint256,address,uint256)": EventFragment;
    "Auction_Initialized(uint256,uint256,address,bytes4)": EventFragment;
    "Auction_StartTimeUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Auction_BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_BidRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_EndTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_IncentivePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Auction_StartTimeUpdated"): EventFragment;
}

export interface Auction_BidPlacedEventObject {
  _auctionID: BigNumber;
  _bidder: string;
  _bidAmount: BigNumber;
}
export type Auction_BidPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  Auction_BidPlacedEventObject
>;

export type Auction_BidPlacedEventFilter =
  TypedEventFilter<Auction_BidPlacedEvent>;

export interface Auction_BidRemovedEventObject {
  _auctionID: BigNumber;
  _bidder: string;
  _bidAmount: BigNumber;
}
export type Auction_BidRemovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  Auction_BidRemovedEventObject
>;

export type Auction_BidRemovedEventFilter =
  TypedEventFilter<Auction_BidRemovedEvent>;

export interface Auction_ClaimedEventObject {
  _auctionID: BigNumber;
}
export type Auction_ClaimedEvent = TypedEvent<
  [BigNumber],
  Auction_ClaimedEventObject
>;

export type Auction_ClaimedEventFilter = TypedEventFilter<Auction_ClaimedEvent>;

export interface Auction_EndTimeUpdatedEventObject {
  _auctionID: BigNumber;
  _endTime: BigNumber;
}
export type Auction_EndTimeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  Auction_EndTimeUpdatedEventObject
>;

export type Auction_EndTimeUpdatedEventFilter =
  TypedEventFilter<Auction_EndTimeUpdatedEvent>;

export interface Auction_IncentivePaidEventObject {
  _auctionID: BigNumber;
  _earner: string;
  _incentiveAmount: BigNumber;
}
export type Auction_IncentivePaidEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  Auction_IncentivePaidEventObject
>;

export type Auction_IncentivePaidEventFilter =
  TypedEventFilter<Auction_IncentivePaidEvent>;

export interface Auction_InitializedEventObject {
  _auctionID: BigNumber;
  _tokenID: BigNumber;
  _contractAddress: string;
  _tokenKind: string;
}
export type Auction_InitializedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  Auction_InitializedEventObject
>;

export type Auction_InitializedEventFilter =
  TypedEventFilter<Auction_InitializedEvent>;

export interface Auction_StartTimeUpdatedEventObject {
  _auctionID: BigNumber;
  _startTime: BigNumber;
}
export type Auction_StartTimeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  Auction_StartTimeUpdatedEventObject
>;

export type Auction_StartTimeUpdatedEventFilter =
  TypedEventFilter<Auction_StartTimeUpdatedEvent>;

export interface IGBM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGBMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bid(
      _auctionID: PromiseOrValue<BigNumberish>,
      _bidAmount: PromiseOrValue<BigNumberish>,
      _highestBid: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuctionBidDecimals(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionBidMultiplier(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionDebt(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionDueIncentives(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionEndTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionHighestBid(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionHighestBidder(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuctionID(
      _contract: PromiseOrValue<string>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionIncMax(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionIncMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionStartTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionStepMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getContractAddress(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHammerTimeDuration(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAmount(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenId(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenKind(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    massRegistrerERC1155Each(
      _initiator: PromiseOrValue<string>,
      _ERC1155Contract: PromiseOrValue<string>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _indexStart: PromiseOrValue<BigNumberish>,
      _indexEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    massRegistrerERC721Each(
      _initiator: PromiseOrValue<string>,
      _ERC721Contract: PromiseOrValue<string>,
      _tokenIDStart: PromiseOrValue<BigNumberish>,
      _tokenIDEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "modifyAnAuctionToken(uint256,uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "modifyAnAuctionToken(uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAnAuctionContract(
      _contract: PromiseOrValue<string>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAnAuctionToken(
      _contract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBiddingAllowed(
      _contract: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    _auctionID: PromiseOrValue<BigNumberish>,
    _bidAmount: PromiseOrValue<BigNumberish>,
    _highestBid: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuctionBidDecimals(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionBidMultiplier(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionDebt(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionDueIncentives(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionEndTime(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionHighestBid(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionHighestBidder(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAuctionID(
    _contract: PromiseOrValue<string>,
    _tokenKind: PromiseOrValue<BytesLike>,
    _tokenID: PromiseOrValue<BigNumberish>,
    _tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionIncMax(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionIncMin(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionStartTime(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionStepMin(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getContractAddress(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getHammerTimeDuration(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAmount(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenId(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenKind(
    _auctionID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  massRegistrerERC1155Each(
    _initiator: PromiseOrValue<string>,
    _ERC1155Contract: PromiseOrValue<string>,
    _tokenID: PromiseOrValue<BigNumberish>,
    _indexStart: PromiseOrValue<BigNumberish>,
    _indexEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  massRegistrerERC721Each(
    _initiator: PromiseOrValue<string>,
    _ERC721Contract: PromiseOrValue<string>,
    _tokenIDStart: PromiseOrValue<BigNumberish>,
    _tokenIDEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "modifyAnAuctionToken(uint256,uint256,address)"(
    _auctionID: PromiseOrValue<BigNumberish>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    _initiator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "modifyAnAuctionToken(uint256,address)"(
    _auctionID: PromiseOrValue<BigNumberish>,
    _initiator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAnAuctionContract(
    _contract: PromiseOrValue<string>,
    _initiator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAnAuctionToken(
    _contract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _tokenKind: PromiseOrValue<BytesLike>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    _initiator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBiddingAllowed(
    _contract: PromiseOrValue<string>,
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(
      _auctionID: PromiseOrValue<BigNumberish>,
      _bidAmount: PromiseOrValue<BigNumberish>,
      _highestBid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionBidDecimals(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionBidMultiplier(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDebt(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDueIncentives(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionEndTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBid(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBidder(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuctionID(
      _contract: PromiseOrValue<string>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMax(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStartTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStepMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddress(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getHammerTimeDuration(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmount(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenKind(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    massRegistrerERC1155Each(
      _initiator: PromiseOrValue<string>,
      _ERC1155Contract: PromiseOrValue<string>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _indexStart: PromiseOrValue<BigNumberish>,
      _indexEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    massRegistrerERC721Each(
      _initiator: PromiseOrValue<string>,
      _ERC721Contract: PromiseOrValue<string>,
      _tokenIDStart: PromiseOrValue<BigNumberish>,
      _tokenIDEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "modifyAnAuctionToken(uint256,uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "modifyAnAuctionToken(uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerAnAuctionContract(
      _contract: PromiseOrValue<string>,
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAnAuctionToken(
      _contract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBiddingAllowed(
      _contract: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Auction_BidPlaced(uint256,address,uint256)"(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _bidder?: PromiseOrValue<string> | null,
      _bidAmount?: null
    ): Auction_BidPlacedEventFilter;
    Auction_BidPlaced(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _bidder?: PromiseOrValue<string> | null,
      _bidAmount?: null
    ): Auction_BidPlacedEventFilter;

    "Auction_BidRemoved(uint256,address,uint256)"(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _bidder?: PromiseOrValue<string> | null,
      _bidAmount?: null
    ): Auction_BidRemovedEventFilter;
    Auction_BidRemoved(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _bidder?: PromiseOrValue<string> | null,
      _bidAmount?: null
    ): Auction_BidRemovedEventFilter;

    "Auction_Claimed(uint256)"(
      _auctionID?: PromiseOrValue<BigNumberish> | null
    ): Auction_ClaimedEventFilter;
    Auction_Claimed(
      _auctionID?: PromiseOrValue<BigNumberish> | null
    ): Auction_ClaimedEventFilter;

    "Auction_EndTimeUpdated(uint256,uint256)"(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _endTime?: null
    ): Auction_EndTimeUpdatedEventFilter;
    Auction_EndTimeUpdated(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _endTime?: null
    ): Auction_EndTimeUpdatedEventFilter;

    "Auction_IncentivePaid(uint256,address,uint256)"(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _earner?: PromiseOrValue<string> | null,
      _incentiveAmount?: null
    ): Auction_IncentivePaidEventFilter;
    Auction_IncentivePaid(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _earner?: PromiseOrValue<string> | null,
      _incentiveAmount?: null
    ): Auction_IncentivePaidEventFilter;

    "Auction_Initialized(uint256,uint256,address,bytes4)"(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _tokenID?: PromiseOrValue<BigNumberish> | null,
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenKind?: null
    ): Auction_InitializedEventFilter;
    Auction_Initialized(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _tokenID?: PromiseOrValue<BigNumberish> | null,
      _contractAddress?: PromiseOrValue<string> | null,
      _tokenKind?: null
    ): Auction_InitializedEventFilter;

    "Auction_StartTimeUpdated(uint256,uint256)"(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _startTime?: null
    ): Auction_StartTimeUpdatedEventFilter;
    Auction_StartTimeUpdated(
      _auctionID?: PromiseOrValue<BigNumberish> | null,
      _startTime?: null
    ): Auction_StartTimeUpdatedEventFilter;
  };

  estimateGas: {
    bid(
      _auctionID: PromiseOrValue<BigNumberish>,
      _bidAmount: PromiseOrValue<BigNumberish>,
      _highestBid: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuctionBidDecimals(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionBidMultiplier(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDebt(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDueIncentives(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionEndTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBid(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionHighestBidder(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionID(
      _contract: PromiseOrValue<string>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMax(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionIncMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStartTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStepMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddress(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHammerTimeDuration(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmount(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenKind(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massRegistrerERC1155Each(
      _initiator: PromiseOrValue<string>,
      _ERC1155Contract: PromiseOrValue<string>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _indexStart: PromiseOrValue<BigNumberish>,
      _indexEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    massRegistrerERC721Each(
      _initiator: PromiseOrValue<string>,
      _ERC721Contract: PromiseOrValue<string>,
      _tokenIDStart: PromiseOrValue<BigNumberish>,
      _tokenIDEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "modifyAnAuctionToken(uint256,uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "modifyAnAuctionToken(uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAnAuctionContract(
      _contract: PromiseOrValue<string>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAnAuctionToken(
      _contract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBiddingAllowed(
      _contract: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      _auctionID: PromiseOrValue<BigNumberish>,
      _bidAmount: PromiseOrValue<BigNumberish>,
      _highestBid: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionBidDecimals(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionBidMultiplier(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionDebt(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionDueIncentives(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionEndTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionHighestBid(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionHighestBidder(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionID(
      _contract: PromiseOrValue<string>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionIncMax(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionIncMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStartTime(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStepMin(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddress(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHammerTimeDuration(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmount(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenKind(
      _auctionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massRegistrerERC1155Each(
      _initiator: PromiseOrValue<string>,
      _ERC1155Contract: PromiseOrValue<string>,
      _tokenID: PromiseOrValue<BigNumberish>,
      _indexStart: PromiseOrValue<BigNumberish>,
      _indexEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    massRegistrerERC721Each(
      _initiator: PromiseOrValue<string>,
      _ERC721Contract: PromiseOrValue<string>,
      _tokenIDStart: PromiseOrValue<BigNumberish>,
      _tokenIDEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "modifyAnAuctionToken(uint256,uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "modifyAnAuctionToken(uint256,address)"(
      _auctionID: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAnAuctionContract(
      _contract: PromiseOrValue<string>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAnAuctionToken(
      _contract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _tokenKind: PromiseOrValue<BytesLike>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBiddingAllowed(
      _contract: PromiseOrValue<string>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
